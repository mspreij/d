\e[38;5;201m--- SSH ---\e[0m
-n      does something with /dev/null and stdin, making ssh work in a while loop. for loops don't need this.
-A:     agent forwarding: your ssh keys are now available to SSH on the remote host as well
-G foo: get all settings for host foo from the .ssh/config file (and a shitton more, | less for finding things)
-t      "Force pseudo-terminal allocation". makes the remote host think you have a terminal, so screen-based programs
        (and cron-vs-interactive checks...) might work better. Also allows for \e[38;5;208mssh -t host sudo -i\e[0m to jump straight to root
        with a proper environment (sans -t you have missing TERM and PS1).
-o      BUNCH of options, check \e[38;5;208mman ssh_config\e[0m for the list. Useful ones:
\e[38;5;208m-o batchmode=yes\e[0m that makes it run non-interactively, and will not ask for input like password of confirm hostkey changes.
\e[38;5;208m-o SendEnv=<VarName>\e[0m  send/copy/export the local env variable to the remote's Env. This can be useful to conditionally run
        some remote ~/.bashrc things based on the origin of the session.
        \e[38;5;201mNB:\e[0m the variable name needs to be specifically allowed in the remote's \e[38;5;226m/etc/ssh/sshd_config\e[0m using
        \e[38;5;208mAcceptEnv <VarName>\e[0m (multiple delimited by space). \e[4;1mMake sure\e[0m this config line sits above any match blocks!
        \e[38;5;201mNB 2:\e[0m if you're using multiplexing (reusing a master connection, see further on), only the env variables \e[1msent while
        creating\e[0m that connection will be set, new ones you send while ssh'ing in over the existing connection will be ignored.
\e[38;5;208m-o SetEnv=<VarName>=<value>\e[0m  like the above except you can set a new/different one, since \e[38;5;208mOpenSSH 7.8\e[0m
-vvv    1 to 3 v's for debugging non-cooperative connections

# To give multiple commands to be run remotely over ssh, quote the lot, or escape the \; thing between them
# Completely randomly, you can add newlines to files by doing \e[38;5;208mecho >> foo.txt\e[0m
# Mind you, still have to quote the >> or the whole thing when ssh'ing the command.

# For more elaborate scripts, just pass it through:
$ ssh somehost 'bash -s' < localscript
# \e[38;5;201mbash -s\e[0m runs lines from STDIN, which is obviously supplied by \e[1m< localscript\e[0m
# localscript doesn't require a shebang, it seems to work with one though.
# Run something on the host as root, and pass args to become $1, $2 etc in the script:
$ ssh somehost 'sudo bash -s' -- foo bar bazz < localscript
# To send args with spaces doubly quote them, or quote + escape the spaces:
$ ssh somehost 'sudo bash -s' -- foo "'bar bazz'" < localscript
$ ssh somehost 'sudo bash -s' -- foo "bar\ bazz" < localscript
# You can also include them in the command part, which requires less quoting/escaping but eh..

# SSH defines some escapes you can use while in session, they all start with a tilde '~', which is only
# interpreted as special when following a newline. \e[38;5;208m~?\e[0m gets you a list, \e[38;5;208mman ssh\e[0m has longer explanations under
# \e[38;5;201mESCAPE CHARACTERS\e[0m. Some useful ones:
~.   # disconnect (presumably when some remote process hangs on you)
~&   # "Background ssh at logout when waiting for forwarded connection / X11 sessions to terminate."

Verbose debugging -v to -vvv, output is prefixed with debug1 to debug3.
The client/server send number or typed packets, here is what the numbers mean:
  https://www.rfc-editor.org/rfc/rfc4250.html#section-4.1.2

\e[31mSSH protocol v.1 is no longer supported\e[0m
# this can mean you need to use a capital P for port if you're using a lowercase p. It can also mean you
# need to use a lowercase p for port if you're using a capital P. Don't ask.


\e[38;5;201m--- SSH-KEYGEN ---\e[0m

### remove a passphrase
$ ssh-keygen -p
# then simply enter the old passphrase and leave the new one blank

### Do this public and private key even belong together?
$ ssh-keygen -E md5 -lf ~/.ssh/id_rsa
$ ssh-keygen -E md5 -lf ~/.ssh/id_rsa.pub
# should return the same results

### Create public key from private key
$ ssh-keygen -y -f foobar > foobar.pub
# -y outputs the public key, -f foobar specifies the private file. Etc.

# see also \e[38;5;201mssh-agent\e[0m


\e[38;5;201m--- SSHD ---\e[0m

# Check /etc/ssh/sshd_config syntax before restarting the service:
$ sshd -t

# You can add match blocks to /etc/ssh/sshd_config to define specific source IPs or authentication methods for users,
#   but they're finicky in that if the global settings allow them, the match blocks are ignored.
# To allow a specific user only from specific IP addresses, just edit its \e[38;5;226m.ssh/authorized_keys\e[0m file:

from="192.168.0.*" ssh-rsa AAAAB3NzaC1yc2E...

# it should allow multiple comma-separated addresses and wildcards


\e[38;5;201m--- MULTIPLEXING ---\e[0m

# SSH allows you to use the same connection for multiple sessions on the remote host, which saves time for scripts that
# run several remote commands. I'm still a bit vague on connection vs session vs whatnot, but if you re-use an existing
# connection, no new lines appear in the server's \e[1mauth.log\e[0m / \e[1msecure\e[0m logs. And it's faster.
# To create a connection that hangs around in the background you can just edit the config file like:
Host whatever
  ControlMaster auto
  ControlPath ~/.ssh/control-%r@%h-%p
  ControlPersist 10m
# Connections to this host will now create a socket file \e[38;5;226m~/.ssh/control-*\e[36m (which will be specific to that host because
# of all the %% stuffs). That first connection becomes the master connection automatically. New connections will
# reuse this connection. 10 minutes of inactivity removes it.
# Check the status:
$ ssh -O check <host>
# Remove it:
$ ssh -O exit <host>

\e[38;5;201m--- TUNNELLING ---\e[0m

### Create a secure tunnel to a specific port on a remote host (example given for VNC)
$ ssh -L \e[32;1m5900\e[0m:\e[38;5;208mlocalhost:5900\e[0m username@remote_host
# \e[37;1m-L\e[0m for local port forwarding
# \e[32;1m5900\e[0m refers to the port on the client (your localhost)
# \e[38;5;208mlocalhost:5900\e[0m refers to port 5900 on the \e[1mlocalhost of the remote host\e[0m, ie it's not going to another host on the remote
# network. Now you connect your VNC client to localhost:\e[32;1m5900\e[0m and SSH will shuffle it to the remote listener's port.

### SOCKS Proxy to browse from another host
$ ssh -D 8080 username@remote_host
# Go to manual proxy configuration in your browser settings -> network
# In the SOCKS Host field, enter localhost and port 8080 (or whatever port you chose).
# Select SOCKS v5 (which supports DNS over the proxy).
# Check Proxy DNS when using SOCKS v5 to make sure all DNS requests are also routed through the remote server.

### Reverse SSH tunnel
# on the target box (Alice), create a reverse tunnel that connects the remote port 2222 to local 22:
Alice_$ ssh \e[32;1m-R 2222:localhost:22\e[0m bob@remote
# keep this connection active, don't let the computer sleep/lock while you're away
# Now on the remote (Bob's machine), you can simply connect to \e[38;5;208m-p 2222 alice@localhost\e[0m:
Bob_$ ssh -p 2222 alice@localhost

# If both Alice and Bob are behind a firewall/router, you can use a jumphost provided both can access that:
Alice_$ ssh -R 2222:localhost:22 \e[32;1mcarol@jumphost\e[0m
Bob_$ ssh \e[32;1m-J carol@jumphost\e[0m -p 2222 alice@localhost
