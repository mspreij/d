# this is a /mostly/ correct interpretation of the man pages, the details on regex are hairy and depend on the grep
# version and implementation

-i   case-insensitive
-v   negate matches (invert result)
-e   use for each pattern if you have more than one to match or negate (it ORs)
-E   extended regex.
-P   Perl compatible regex
-s   surpress that warning about directories (and other unreadable files)

--include \*.php  # only search these files. either escape the * or quote the string

# find LITERAL periond: use quotes _and_ escape it
$ grep 'foo\.txt' *

### output
-H   print filename with each match (default for wildcard file patterns)
-h   do NOT print filename even for multiple files, this is useful when you want to further parse the contents
-n   print line number
[-A, -B, -C]#  print # lines after, before, or around matching lines
-o   print only the matching part of the line, useful to regex values out of a file for use in a pipeline
     this also puts multiple matches in a single line on separate lines in the output, so it can be used to count matches
-m # print only the first # matching lines
-l   print only the filenames, not the matching lines
-L   print filenames that DO NOT match the pattern
-c   outputs number of matching lines (multiple matches on same line still counts as 1)

# filter out empty lines for, say, -v, by using a start/end pattern ^$
$ grep -v -e foobar -e ^$

# bugs
grep will hang on named pipes/FIFO type things, and not skip them even if they are in the --exclude list. You can use
  --device=skip to not process this type of file.
