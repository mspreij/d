# flags
-E    use regex, \1, \2 etc are backreferences
-i    change file in place
-e    use for multiple separate 's/foo/bar/' replacements (kinda like grep?)

# no, sed doesn't understand linebreaks, but it *does* understand line _beginnings_, so in case you were trying to
# indent some string or output again:
echo -n "$foo" | sed 's/^/  /'
echo
# the -n and last echo are optional, in case padding the last linebreak of $foo presents formatting issues

# single quotes in sed is often hassle, maybe it supports \\x27 notation. if not can you wrap the expression
# in double quotes?

# using sed to color certain substrings; basically use \\x1b for ESC
echo 12345367 | sed 's/3/\\x1b[31m3\\x1b[0m/g'
# ORRRR you can use bash's $'..' to interpret escaped characters in a string
echo 12345367 | sed $'s/3/\\e[31m3\\e[0m/g'
