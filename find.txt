# Basically find takes 1 \e[1mor more\e[0m directories, tests (name, mtime, type, etc) and actions.
# Most of the below examples are just tests.
# With \e[38;5;208m-not\e[0m or \e[38;5;208m!\e[0m you can negate a test.

# list all files modified within the last day (+1 for before last day, 1 for exactly 24 hours ago)
$ find . -mtime -1
# \e[38;5;208m-mmin\e[0m for minutes ago/before/etc
# if you want long format (think ls -la) add \e[38;5;208m-ls\e[0m:
$ find . -mtime -1 -ls
# then again, -ls has a retarded flag by default stuffing inodes or something in front, you can also use \e[38;5;208mexec\e[0m:
$ find . -mtime -1 -exec ls -la \;
# the \e[38;5;208m\;\e[0m is a retarded -exec thing, think of it as an actual argument that must be escaped because bash, and needs
#   to be separated from the previous element with a space. SERIOUSLY, you used ";" as a REQUIRED ARGUMENT??

# find files owned by specific user or group
$ find . -user joe -group developers
# (yeah, try and remember THAT)

# find files with extension foo, note the wildcard AND the quotes because why make things simple (though the quotes seems to
# not always be required, sometimes they ARE, I dunno, just use 'm)
$ find . -name '*foo'

# find files except not in /that/ directory (note, again, the quotes and slashes and wildcard..)
$ find . -name '*php' -not -path './vendor/*'
# although the second slash is technically optional. possibly. depending, probably.

# find files matching this or that, except not in /that/ directory
$ find . \( -name '*php' -o -name '*json' \) -not -path './vendor/*'
# the -o is an OR, and the escaped () group the name matches to logically separate both from the directory filter

# find links
$ find . -type l
# pipe to xargs realpath to get the sources, or add \e[38;5;208m-ls\e[0m and ignore the extra cruft

# find _broken_ links
$ find . -xtype l

# find \e[31mnot\e[0m links (files only)
$ find . -type f

# simple function searching current and sub-directories for case-insensitive substring match
f ()
{
    if [[ "$1" = '' ]]; then
        echo '  Finds files in current (sub)directory containing given substring. Usage: $ f <substring>';
        echo "  Implemented as: $ find . -iname \"*\$1*\" -not -path './.git/*' -not -path './vendor/*' | cut -b 3-;";
        echo "  It works mostly.";
        return;
    fi;
    find . -iname "*$1*" -not -path './.git/*' -not -path './vendor/*' | cut -b 3-
}

There are modern `find` alternatives, I'll list 'm when I ..find 'm.
