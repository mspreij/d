# So, there was a \e[1mgetopt\e[0m in a bygone era which had issues, so they made a \e[1mgetopts\e[0m in 1986 which was shipped with bash.
# In 1995 it was added to the Single Unix Specification (SUS).
# Then a newer one was made for Linux based on a BSD getopt, which they also named getopt. It fixes things in the original
#   getopt, and adds features that getopts lacks.

# for php the syntax is
$options = getopt($shortflags, [array $longflags], [stuff more to finish later.

# The following does not use getopts, but will work for simple separate -x -y -z flags.
# This is how you hack it together for your one-off function 'foo':

function foo {
    local debug
    local silent
    ... vars, settings, whatever?
    while true; do
        case "$1" in          # case just looks at the first argument. if it's a -d, a var is reset
            -d)               # and the -d is taken out of args. now it goes back to the start of the loop
                debug=echo;
                shift
            ;;
            -s)               # so the next loop around, it might encounter -s and the same thing happens.
                silent='-s';  # but because while (true) it also works if -s comes before -d
                shift
            ;;
            *)                # first time it encounters something not in the cases, it exits the while loop.
                break
            ;;
        esac;
    done;
    actual_thing="$1"
    ... body of the function
}
# Notes:
# - every case ends with a double ;;. This can immediately follow the preceding command or statement, like shift;;
# - yes, every case starts with \e[38;5;208mthe-thing-to-match )\e[0m , bash is weird like that.
