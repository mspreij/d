# which config files come from where?
$ /usr/sbin/mysqld --verbose --help | grep -A 1 "Default options"
# the most common file/location is /etc/my.cnf

# data files:
/var/lib/mysql/<dbname>/files.[frm/MYD/MYI]


# === SQL ===

# basic administration stuff:
CREATE USER 'joe'@'localhost' IDENTIFIED BY 'supersekrit'                     -- create user account
GRANT SELECT, INSERT, UPDATE, DELETE ON theCornerShop.* TO 'joe'@'localhost'  -- grant permissions example
   ALL                              -- every permission applicable to {target} (except for GRANT)
   SELECT, INSERT, UPDATE, DELETE   -- a.k.a. CRUD
   CREATE, ALTER, INDEX, DROP       -- CRUD for tables
SHOW GRANTS [FOR 'username']                                                  -- shows your or specified user's permissions
REVOKE DELETE, UPDATE ON theCornerShop.localhost FROM 'jim'@'localhost'       -- remove specific permissions
REVOKE ALL PRIVILEGES ON theCornerShop.*  FROM user@host;                     -- remove bunch of permissions
DROP USER 'leetHax0r1994'                                                     -- delete user (for all hosts..?)

SET PASSWORD FOR <username>@<host> = PASSWORD('evensekriter')                 -- update password

UPDATE user SET ssl_type = 'ANY' WHERE user = '<username>' AND host = '<host-address>'; -- old force encryption
ALTER USER 'user'@'host' REQUIRE SSL                                          -- new force encryption

# list keys and stuff
SHOW INDEX FROM <table>;

# remove duplicate records
ALTER IGNORE TABLE \e[32m<table>\e[0m ADD UNIQUE INDEX \e[32m<foo>\e[0m (\e[32m<foo>\e[0m);
# and then optionally..
ALTER TABLE <table> DROP INDEX \e[32m<foo>\e[0m;

# if you can't drop a database because "a foreign key constraint fails" (I couldn't make this up) tell it to sod off
SET FOREIGN_KEY_CHECKS=0;
# set them back to 1 afterwards I guess.


# === CLI ===

# general query result display (running queries straight from the bash prompt with -e):
-s  # no grid-lines for query output
-N  # no headers/column names for query output

## In the client
# MySQL has a few flags/toggles that you can run interactively, '\h' will bring up a list.
#   useful ones are \s for status, \! for system commands and \\e for editing large multiline queries in a real editor

# The pager only works under 'unix', which apparently can mean 'centos but not wsl/ubuntu'. NB: when connecting to a remote host,
#   it's the abilities of the local client that count.
# While running you can enter \e[32m\P less\e[0m; when launching you can pass --pager=less or have pager=less in the config file
#   under [mysql].
# 'select foo bar bazz \G' = vertical result (more useful with a WORKING pager >.>) \G and others imply ';' and will run the query

# == "Recipes" or some shit ==
# - Export a database from localhost to remote server, compressed. Mind the quotes and the pipes and such.
$ mysqldump --default-character-set=utf8 -u <user> -p<password?> <database> | gzip -c | ssh user@remote 'gunzip | mysql --default-character-set=utf8 -u <remote_user> -p<remote_password> <remote_database>'
# basically dump the local database into gzip, pass that on to ssh which pours it in the quoted command pipeline it's given
