# grab myfile.txt from otherbranch and put it HERE, RIGHT FUCKING NOW
  $ git checkout otherbranch myfile.txt

# just show old/other version of file, from another branch or specific commit (shown)
  $ git show 412c00baa6\e[32;1m:\e[0mpath/to/filename

# what am I about to push?
  $ git diff [--stat] origin/master

# delete (remote) branch
  $ git push -d origin <branchname>
  $ git branch -d <branchname>
# '-D' or '-d --force' will also delete unmerged branches

# rename (remote) branch, assuming you have branchOldName checked out
  $ git branch -m \e[32mbranchNewName\e[0m
  $ git push origin :branchOldName; $ git push --delete \e[38;5;208mbranchOldName\e[0m
  $ git branch --unset-upstream \e[32mbranchNewName\e[0m
  $ git push
# first you rename the current local branch, then you delete the old remote one (the first form is a shortcut),
# then you unset the remote branch (which is still set to the old name) for the current local new branch
# then you simply push and git will yell at you, and give you something to copy/paste to both push and set the remote
# branch to the new name.

# git add remote [github] repo for existing project
Create remote repo, copy the url
$ git remote add origin <paste-url-here>
$ git push
# urls can be like https://... or git@github.com:username/foo.bar, the latter works better with ssh keys

# to create a new empty repository locally:
$ git init --bare foo.git
# and paste path instead of url

# git change remote url
git remote set-url origin foo://bar/baz.git
# looks like you can also edit .git/config ?

# git puts all informative output on STDERR, which is not unixy. to not spam your inbox via crontab,
# you can use the following (in a script):
git -E fragile-command > tmp 2>&1 || mail_tmp_to_yourself
# or for a bunch of them, "cat tmp >> all_errors.txt" and check that at EOF

# see diff with more context
$ git diff -U30 file
# -U takes number of lines before and after the change. you can use \e[32m-U$(wc -l <file>)\e[0m as well which will
#   show the whole file. Since wc also prints the filename after the number of lines, no need to specify that for git too.
$ git diff -U$(wc -l file)
